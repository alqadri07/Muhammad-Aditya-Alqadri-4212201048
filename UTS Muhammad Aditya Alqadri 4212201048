import numpy as np
import pandas as pd
import cv2
from sklearn import svm
from sklearn.model_selection import LeaveOneOut
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, f1_score
from skimage.feature import hog
import matplotlib.pyplot as plt
import seaborn as sns

# Fungsi untuk ekstraksi fitur HOG
def extract_hog_features(images):
    hog_features = []
    for image in images:
        image = image.reshape(28, 28).astype(np.uint8)  # Ubah ukuran gambar
        features = hog(image, orientations=9, pixels_per_cell=(7, 7), cells_per_block=(2, 2), visualize=False)
        hog_features.append(features)
    return np.array(hog_features)

# Memuat dataset
def load_data(file_path):
    try:
        data = pd.read_csv(file_path)
        images = data.iloc[:, 1:].values  # Semua kolom kecuali kolom pertama
        labels = data.iloc[:, 0].values    # Kolom pertama sebagai label
        return images, labels
    except Exception as e:
        print(f"Kesalahan saat memuat data: {e}")
        raise

# Klasifikasi menggunakan Leave-One-Out Cross-Validation (LOOCV)
def classify_with_loocv(images, labels):
    loo = LeaveOneOut()
    y_true = []
    y_pred = []
    
    hog_features = extract_hog_features(images)

    for i, (train_index, test_index) in enumerate(loo.split(hog_features)):
        print(f"Iterasi LOOCV: {i + 1}/{len(hog_features)}")
        X_train, X_test = hog_features[train_index], hog_features[test_index]
        y_train, y_test = labels[train_index], labels[test_index]
        
        clf = svm.SVC(kernel='linear')  
        clf.fit(X_train, y_train)
        
        prediction = clf.predict(X_test)
        y_true.append(y_test[0])
        y_pred.append(prediction[0])

    return y_true, y_pred

# Evaluasi performa
def evaluate_performance(y_true, y_pred):
    cm = confusion_matrix(y_true, y_pred)
    accuracy = accuracy_score(y_true, y_pred)
    precision = precision_score(y_true, y_pred, average='weighted')
    f1 = f1_score(y_true, y_pred, average='weighted')

    print("Confusion Matrix:\n", cm)
    print("Accuracy: {:.2f}%".format(accuracy * 100))
    print("Precision: {:.2f}".format(precision))
    print("F1 Score: {:.2f}".format(f1))
    
    plt.figure(figsize=(10, 7))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=np.unique(y_true), yticklabels=np.unique(y_true))
    plt.ylabel('Actual')
    plt.xlabel('Predicted')
    plt.title('Confusion Matrix')
    plt.show()

# Main function
if __name__ == "__main__":
    input_file = 'C:\\Users\\USER\\Downloads\\data.csv'  # Ganti dengan path yang sesuai
    images, labels = load_data(input_file)
    y_true, y_pred = classify_with_loocv(images, labels)
    evaluate_performance(y_true, y_pred)
